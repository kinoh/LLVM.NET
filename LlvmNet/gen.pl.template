use strict;

my @prim_types = ('bool', 'int', 'unsigned', 'unsigned short', 'float', 'double', 'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'int8_t', 'int16_t', 'int32_t', 'int64_t', 'size_t');
#DEF defined_in_class
#DEF defined_in


my $file = $ARGV[0];

my ($folder, $file_name, $file_ext) = ($file =~ /([^\\\/]+)[\\\/]([^\\\/]+)\.(\w+)$/);
my $output_h = "$file_name.h";
my $output_c = "$file_name.cpp";
unlink $output_h;
unlink $output_c;

print "Source   : $file\n";

my $use_netlib = 0;
my $use_marshal = 0;
my $use_marshal_cpp = 0;
my @libs = ();
my @refs_decl = ();
my @refs_incl = ();
my @refs_incl_h = ();
my @additional_decl = ();

my $class = '';
my $base = '';
my @data = ();
my $public = 0;
my $static_class = 0;
my $use_utils = 0;
my (@header, @code) = ((), ());
open F, $file;
while (<F>)
{
	s/^\s\s// if ($class eq 'DebugLoc' or ($class and ($file_name eq 'IntrinsicInst' or $file_name eq 'PrettyStackTrace')));

	if (/^namespace (\w+)\s*\{/)
	{
		if ($1 eq 'CallingConv' or $1 eq 'Intrinsic')
		{
			print "namespace $1\n";
			$class = $1;
		}
		elsif ($1 eq 'llvm' and ($file_name eq 'PrintModulePass' or $file_name eq 'InitializePasses'))
		{
			print "global functions\n";
			$class = 'Passes';
		}
		else
		{
			next;
		}
		$base = '';
		@data = ();
		$public = 1;
		$static_class = 1;
		while (<F>) {
			last if ($_ !~ /^(?:|\s*class \w+;)$/);
		}
	}
	elsif (not $class
		and /^\s*class (\w+)(?:\s*:\s*([\w <>,\*]+))?\s*(\{)?[^;\{]*(?:\/\/.*)?$/)
	{
		if ($1 eq 'ConcreteOperator'
			or $1 eq 'IRBuilderDefaultInserter'
			or $1 eq 'raw_svector_ostream'
			or $1 eq 'FPPassManager'
			or $1 =~ /iterator/)
		{
			next;
		}
		print "class $1\n";
		$class = $1;
		$base = $2;
		unless ($3)
		{
			my $cl;
			do {
				$_ = <F>;
				/^\s*([^\{]+)(\{)?/;
				$base .= $1;
				$cl = $2;
			} while (not $cl);
		}
		@data = ();
		$public = 0;
		$static_class = 0;
	}
	elsif ($class
			and (/^\};/ or ($static_class and /^\}/)))
	{
		my ($h, $c) = &manage_class();
		push @header, $h;
		push @code, $c if ($c);
		$class = 0;
	}
	elsif (not $class and /^\s*enum (\w+)(?!\w)([^\}]*)(?:\};)?/)
	{
		my $h = "enum class " . $1 . $2;
		unless ($3)
		{
			while (<F>) {
				last if (/\};/);
				$h .= $_;
			}
		}
		$h .= '};';
		$h =~ s/\s*\{/\n{/;
		$h =~ s/^\s\s/\t/g;
		$h =~ s/\s*\/\/.+//g;
		push @header, $h;
	}
	elsif ($class and /^\s*class (\w+)\s*[\{:]([^\}]*)(?:\};)?/)
	{
		print "IGNORE $1 in $class\n";
		unless ($3)
		{
			while (<F>) {
				last if (/\};/);
			}
		}
	} elsif (/^\s*(public|protected|private):/) {
		$public = ($1 eq 'public');
	} elsif ($public) {
		push @data, $_;
	}
}
close F;

print "Generate : $output_h\n";
open H, "> $output_h";
print H "#pragma once\n";
print H "#using <mscorlib.dll>\n" if ($use_netlib);
print H "#include \"llvm/" . ($folder ne 'llvm' ? "$folder/" : '') . "$file_name.$file_ext\"\n";
foreach (@refs_incl_h) {
	print H "#include \"$_\"\n";
}
print H "\n";
print H "namespace LLVM\n";
print H "{\n\n";
foreach (@refs_decl) {
	my $t;
	if ($_ eq 'AnalysisID') {
		$t = 'value';
	} elsif (&is_enum($_)) {
		$t = 'enum';
	} else {
		$t = 'ref';
	}
	print H "$t class $_;\n";
}
foreach (@additional_decl) {
	print H "$_\n";
}
print H "\n" if ((@refs_decl ne 0) or (@additional_decl ne 0));
print H (join "\n\n", @header);
print H "\n}\n";
close H;

if ($#code >= 0)
{
	print "Generate : $output_c\n";
	open C, "> $output_c";
	print C "#include \"$output_h\"\n";
	foreach (@libs) {
		print C "#include \"$_\"\n";
	}
	foreach (@refs_incl) {
		print C "#include \"$_\"\n";
	}
	print C "#include <msclr/marshal.h>\n" if ($use_marshal);
	print C "#include <msclr/marshal_cppstd.h>\n"
		. "#include <string>\n" if ($use_marshal_cpp);
	print C "#include \"utils.h\"\n" if ($use_utils);
	print C "\n";
	print C "using namespace LLVM;\n\n";
	print C (join "\n\n", @code);
	close C;
}


my $abstruct;
my $constr_inhr;
my @member_private;
my @decl;

sub manage_class
{
	if ($class eq 'Value')
	{
		push @refs_decl, 'Value';
		push @additional_decl,
			'typedef System::Collections::Generic::KeyValuePair<System::String ^, Value ^> ValueName;';
	}
	elsif ($class eq 'Pass')
	{
		push @additional_decl, <<EOF

public interop AnalysisID
{
internal:
	const void *base;
	AnalysisID(const void *base)
		: base(base)
	{
	}
};
EOF
	}

	$constr_inhr = '';
	@member_private = ();
	my @base_reconstr = ();
	foreach (split /,\s*/, $base)
	{
		if (/public (\w+?[^\s])\s*$/
			and $1 ne 'FoldingSetNode'
			and $1 ne 'Inserter'
			and (substr $1, 0, 10) ne 'ilist_node')
		{
			&add_lib($1, 1);
			$constr_inhr .= "\t\t, $1(base)\n";
			push @base_reconstr, 'public ' . $1;
		}
	}
	$base = join ', ', @base_reconstr;

	@decl = ();

	my $text = join '', @data;
	$text =~ s/enum (\w+\s*\{[^\}]+\};)/
		push @decl, "enum class $1";
		'' /megs;

	$text =~ s/\s*\/\/.*//g;
	$text =~ s/,\s*\n\s*/, /mg;
	$text =~ s/\{[^\{\}]*((?R)[^\{\}]*)*\}//mgs;
	$text =~ s/\(\s*\n\s*/(/mg;
	$text =~ s/\s*\n\s*\)/)/mg;
	$text =~ s/^\s*\n//mg;
	
	$text =~ s/(\w+)([\*&]) ?/$1 $2/g;
	$text =~ s/(?<=[a-zA-Z])\s+(?=\()//g;
	$text =~ s/(?:\s*;\s*|(?<=[^;\s])\s*)$/;/mg;
	$text =~ s/ const;$/;/mg;
	$text =~ s/^\s*~$class\(\)\s*;\s*$//mg;
	$text =~ s/^	/\t/mg;

	$abstruct = ($text =~ / = 0;/);

	my @header = ();
	my @code = ();
	my $has_constr = 0;

	foreach (split /\n+/, $text)
	{
		if (/^\s*
			((?:static\ )?+)
			((?:explicit\ )?+(?:virtual\ )?+(?:inline\ )?+)
			\s*((?&TYPE))?
			(?(3)\s+)
			([*&]?)(\w+)
			\(
				((?&ARG)(?:,\s*(?&ARG))*)?
				((?(6),\s*)(?&ARG)(?&DEF)(?:,\s*(?&ARG)(?&DEF))*)?
			\)
			(?:\s*:\s*\w+[^;]+)?\s*(?:=\s*0\s*)?;

			(?(DEFINE)
				(?<TYPE>(?:const\ )?(?:\w+::)?\w+(?:<(?:\w+::)?\w+\s*(?:\*\s*)?>)?)
				(?<ARG>(?&TYPE)(?:\ [*&]?\w*)?)
				(?<DEF>\s*=\s*(?:\w+(?:\(\))?|\"\"))
			)
			/x and &func_filter($1, $2, $3, $4, $5, $6 . $7)
			and not ($abstruct and $5 eq $class))
		{
			$has_constr = 1 if ($5 eq $class);
			my ($h, $c) = &trans_func($1, $2, $3, $4, $5, $6, $7);
			for (my $i = 0; $i <= $#{$h}; $i++)
			{
				next if (grep { $_ eq $$h[$i] } @header);
				push @header, $$h[$i];
				push @code, $$c[$i];
			}
		}
		elsif ($_ eq '  struct ModuleFlagEntry;')
		{
			&add_lib('MDString', 1);
			&add_lib('Value', 1);
			my $h =<<EOF;
interop ModuleFlagEntry
	{
	public:
		ModFlagBehavior ^Behavior;
		MDString ^Key;
		Value ^Val;
		ModuleFlagEntry(ModFlagBehavior B, MDString ^K, Value ^V)
			: Behavior(B)
			, Key(K)
			, Val(V)
		{
		}

	internal:
		ModuleFlagEntry(llvm::Module::ModuleFlagEntry *base)
			: Behavior(safe_cast<ModFlagBehavior>(base->Behavior))
			, Key(gcnew MDString(base->Key))
			, Val(gcnew Value(base->Val))
		{
		}
	};
EOF
			push @decl, $h;
		}
		else
		{
			push @header, "\t//" . (substr $_, 1) . "\n";
		}
	}

	$base =~ s/,\s*public ilist_node<\w+>\s*//;

	my $original = 'llvm::' . $class;
	$original .= '<>' if ($class eq 'IRBuilder');

	my $pre_header = "public ref class $class\n";
	$pre_header .= "\t: $base\n" if ($base);
	$pre_header .= "{\n";

	if (@decl)
	{
		$pre_header .= "public:\n";
		foreach (@decl)
		{
			s/  /\t/g;
			s/\s*\/\/.+//g;
			s/ \{/\n\t{/;
			$pre_header .= "\t$_\n";
		}
		$pre_header .= "\n";
	}
	if (@member_private or $has_constr)
	{
		$pre_header .= "private:\n";
		$pre_header .= "\tbool constructed;" if ($has_constr);
		$pre_header .= join '', @member_private;
		$pre_header .= "\n";
	}
	if ($static_class) {
		$pre_header .= "public:\n";
	} else {
		$pre_header .=
			"internal:\n"
			. "\t$original *base;\n"
			. "\t$class($original *base);\n\n"
			. "public:\n"
			. "\t!$class();\n"
			. "\tvirtual ~$class();\n";
	}

	my $pre_code = '';
	unless ($static_class)
	{
		$pre_code .=
			"${class}::$class($original *base)\n"
			. "\t: base(base)\n"
			. &reduce_indent($constr_inhr);
		$pre_code .= "\t, constructed(false)\n" if ($has_constr);
		$pre_code .=
			"{\n}\n"
			. "${class}::!$class()\n"
			. "{\n";
		if ($has_constr)
		{
			$pre_code .=
				"\tif (constructed)\n"
				. "\t{\n"
				. "\t\tdelete base;\n"
				. "\t}\n";
		}
		$pre_code .= "}\n"
			. "${class}::~$class()\n{\n\tthis->!$class();\n}\n";
	}

	return ($pre_header . (join '', @header) . "};\n", $pre_code . (join '', @code));
}
sub func_filter
{
	my ($static, $mod, $type, $ptr, $name, $args) = @_;

	if ($type =~ /^const (?!char|Twine)| operator$|iterator$|APInt/
		or $name eq 'DECLARE_TRANSPARENT_OPERAND_ACCESSORS'
		or $name eq 'DEFINE_HELPERS'
		or $name eq 'raw_ostream'
		or $name eq 'getIntrinsicInfoTableEntries'
		or $name eq 'use_empty_except_constants'
		or $name eq 'getAnalysisIfAvailable'
		or $name eq 'addRequired'
		or $name eq 'addRequiredTransitive'
		or $name eq 'addPreserved'
		or $name eq 'getImmutablePasses'
		or $name eq 'collectRequiredAnalysis'
		or $args =~ /
			iterator
			|APInt
			|APFloat
			|FoldingSet
			|InlineAsmDiagHandlerTy
			|CaseIt
			|IntegersSubset
			|TBAAStructField
			|Inserter
			|InsertPoint
			|\ T\ 
			|DataLayout
			|formatted_raw_ostream
			/x
		or $type eq 'APInt'
		or $type eq 'APFloat'
		or $type eq 'InlineAsmDiagHandlerTy'
		or $type eq 'CaseIt'
		or $type eq 'ConstCaseIt'
		or $type eq 'ConstraintInfoVector'
		or $type eq 'InstTy'
		or $type eq 'InsertPoint'
		or $type eq 'AnalysisType'
		)
	{
		return 0;
	}
	return 1;
}

sub trans_func
{
	my ($static, $mod, $type, $ptr, $name, $arg, $varg) = @_;

	if (($class eq 'Value') and ($name eq 'getValueName'))
	{
		&add_lib('StringRef');
		&add_lib('StringMapEntry');
		$use_utils = 1;
		my $code =<<EOF;
ValueName ^Value::getValueName()
{
	auto a = base->getValueName();
	return gcnew ValueName(utils::manage_str(a->getKey()), gcnew Value(a->getValue()));
}
EOF
		my @h = ("\tValueName ^getValueName();\n");
		my @c = ($code);
		return (\@h, \@c);
	}
	if (($class eq 'Value') and ($name eq 'setValueName'))
	{
		&add_lib('StringRef');
		&add_lib('StringMapEntry');
		$use_utils = 1;
		my $code =<<EOF;
void Value::setValueName(ValueName ^VN)
{
	msclr::interop::marshal_context ctx;
	const char *key = ctx.marshal_as<const char *>(VN->Key);
	auto a = llvm::ValueName::Create(key, key + VN->Key->Length);
	auto value = VN->Value->base;
	a->setValue(value);
	base->setValueName(a);
}
EOF
		my @h = ("\tvoid setValueName(ValueName ^VN);\n");
		my @c = ($code);
		return (\@h, \@c);
	}

	$arg =~ tr/*/^/;
	my @args = split /,\s*/, $arg;
	$varg =~ tr/*/^/;
	$varg =~ s/\s*=\s*\w+//g;
	my @vargs = split /,\s*/, $varg;
	if (@vargs == 0) {
		push @vargs, '';
	} elsif (@args == 0) {
		unshift @vargs, '';
	}

	my $return_by_ptr = 0;
	my $constr = '';
	my $pre = '';
	my $post = '';
	my $constructor = ((not $type) and ($name eq $class));
	my $store = 0;
	my $use_ctx = 0;
	my @arg_call = ();

	if (not $constructor and ($args[$#args] =~ /^(SmallVectorImpl<\w+\s*\^?>)\s+&\w+$/))
	{
		pop @args;
		$type = $1;
		$return_by_ptr = -1;
	}
	elsif (not $constructor and ($args[0] =~ /^(SmallVectorImpl<\w+\s*\^?>)\s+&\w+$/))
	{
		shift @args;
		$type = $1;
		$return_by_ptr = 1;
	}

	$static = 'static ' if (not $static and $static_class);

	if ($class eq 'Constant' and $name eq 'replaceUsesOfWithOnConstant') {
		$args[0] = 'Value ^From';
		$args[1] = 'Value ^To';
	}
	for (my $i = 0; $i <= $#args; $i++)
	{
		($args[$i], $arg_call[$i], $constr, $pre, $post, $store, $use_ctx)
			= &manage_arg($args[$i], $constr, $pre, $post, $store, $use_ctx, $constructor);
	}

	if ($return_by_ptr)
	{
		splice @arg_call, ($return_by_ptr > 0 ? 0 : $#arg_call + 1), 0, 'r';
	}
	
	my $array = 0;
	my $need_cast = &is_enum($type);

	if ($need_cast
		and $type !~ /::/
		and (defined $defined_in_class{$type}))
	{
		$type = $defined_in_class{$type} . '::' . $type;
	}

	if ($type =~ /(SmallVectorImpl)<((?:\w+::)?\w+)\s*(\^?)>/)
	{
		&add_lib($1);
		&add_lib($2);
		$use_netlib = 1;
		$store++;
		my ($t, $c) = ($2, 'r[i]');
		if ((grep { $_ =~ /(?:enum|value) class $t(?!\w)/ } @decl)) {
			$t = $class . '::' . $t;
		}

		$pre = "\tllvm::SmallVector<" . (&is_prim_type($t) ? '' : 'llvm::') . $t . ($3 ? ' *' : '') . ", 8> r;\n";
		unless (&is_prim_type($t))
		{
			if ($t eq 'StringRef')
			{
				$use_utils = 1;
				$t = 'System::String ^';
				$c = "utils::manage_str($c)";
			}
			elsif (&is_enum($t))
			{
				$c = "safe_cast<$t>($c)";
			}
			else
			{
				my $h = (&is_ref_class($t) ? '' : '&');
				$c = "gcnew $t($h$c)";
				if ($t !~ /\^$/) {
					$t = "$t ^";
				}
			}
		}
		$post =
			"\tarray<$t> ^s = gcnew array<$t>(r.size());\n"
			. "\tfor (int i = 0; i < s->Length; i++)\n"
			. "\t\ts[i] = $c;\n"
			. $post;
		$type = "array<$t>";
		$ptr = 1;
		$array = 1;
	}
	elsif ($type =~ /(ArrayRef)<((?:\w+::)?\w+)\s*(\*?)>/)
	{
		&add_lib($1);
		&add_lib($2);
		$use_netlib = 1;
		$store++;
		my ($t, $c);
		($t, $c, $constr, $pre, $post, $store, $use_ctx)
			= &manage_arg($2 . ($3 ? ' ^' : ' ') . 'r', $constr, $pre, $post, $store, $use_ctx, $constructor);
		$t =~ s/ ?\w+$//;
		$post =
			"\tarray<$t> ^s = gcnew array<$t>(r.size());\n"
			. "\tfor (int i = 0; i < s->Length; i++)\n"
			. "\t\ts[i] = ${c}[i];\n"
			. $post;
		$type = "array<$t>";
		$ptr = '*';
		$array = 1;
	}
	elsif ($type =~ /^(\w+)ListType$/)
	{
		my $t = $1;
		$t = 'GlobalVariable' if ($t eq 'Global');
		$t = 'GlobalAlias' if ($t eq 'Alias');
		$t = 'NamedMDNode' if ($t eq 'NamedMD');
		$t = 'Instruction' if ($t eq 'Inst');
		&add_type($t);
		&add_lib('iplist');
		$use_netlib = 1;
		$type = "System::Collections::Generic::List<$t ^>";
		$store++;
		$post =
			"\tauto s = gcnew System::Collections::Generic::List<$t ^>(r->size());\n"
			. "\tfor (auto it = r->begin(); it != r->end(); ++it)\n"
			. "\t\ts->Add(gcnew $t(it));\n"
			. $post;
		$ptr = '&';
		$array = 1;
	}
	elsif (($type eq 'const char' and $ptr)
		or $type eq 'StringRef'
		or $type eq 'std::string')
	{
		$use_netlib = 1;
		&add_lib('StringRef') if ($type eq 'StringRef');
		$type = 'System::String';
		$ptr = '*';
		$need_cast = 0;
	}
	elsif ($type eq 'AnalysisID')
	{
		$ptr = '*';
	}
	elsif ($type)
	{
		&add_type($type);
		$ptr = '&' if (not $ptr and &is_ref_class($type));
	}

	my $call_by;
	if ($constructor)
	{
		$mod = '';
		$call_by = 'new llvm::';
	}
	else
	{
		if ((grep { $_ =~ /enum class $type(?!\w)/ } @decl)) {
			$mod .= $class . '::';
			$need_cast = 1;
		}
		$mod .= "$type " . ($ptr ? ($type eq 'void' ? '*' : '^') : '');
		$call_by = ($static ? ($class eq 'Passes' ? 'llvm::' : "llvm::${class}::") : 'base->');
	}
	my $mod_c = $mod;
	$mod_c =~ s/virtual |explicit //;

	my $no_ret = (($type eq 'void') and (not $ptr));
	my $suffix = ($return_by_ptr ? 'Array' : '');
	my $template_param = (($constructor and $class eq 'IRBuilder') ? '<>' : '');
	my @header = ();
	my @code = ();
	foreach (@vargs)
	{
		if ($_)
		{
			last if (/ErrInfo/);
			my ($a, $c);
			($a, $c, $constr, $pre, $post, $store, $use_ctx)
				= &manage_arg($_, $constr, $pre, $post, $store, $use_ctx, $constructor);
			push @args, $a;
			push @arg_call, $c;
		}

		my $call = $call_by . $name . $template_param . '(' . join(', ', @arg_call) . ')';
		if (($ptr ne '*')
			and not $constructor
			and not $need_cast
			and not $return_by_ptr
			and ($type ne 'void')
			and ($type ne 'AnalysisID')
			and not &is_prim_type($type))
		{
			$call =  '&' . $call;
		}

		my $arg_str = join ', ', @args;

		if ($constructor and $use_ctx)
		{
			my $arg_names = join ', ', ( map { /[ ^&](\w+)$/; $1 } @args );
			my $h = "\tstatic llvm::$class$template_param *_construct($arg_str);\n";
			unless (grep { $_ eq $h } @member_private)
			{
				push @member_private, $h;
				push @header, "\t$mod$class($arg_str);\n";
				push @code, "llvm::$class$template_param *${class}::_construct($arg_str)\n"
					. "{\n"
					. $pre
					. "\treturn $call;\n"
					. "}\n"
					. "$mod_c${class}::$class($arg_str)\n"
					. "\t: ${constr}base(_construct($arg_names))\n" . &reduce_indent($constr_inhr)
					. "\t, constructed(true)\n"
					. "{\n}\n";
			}
			next;
		}

		unless ($return_by_ptr)
		{
			if ($ptr)
			{
				if ($type eq 'System::String') {
					$use_utils = 1;
					$call = "utils::manage_str($call)";
				} elsif ((not $array) and ($type ne 'void')) {
					$call = "gcnew $type($call)";
				}
			}
			$call = "safe_cast<$type>($call)" if ($need_cast);
		}

		$post =~ s/\t*return \w+;\n$//m if ($no_ret);

		my $decl_suffix = '';
		if ((($base =~ /public GlobalValue/)
			and ($name eq 'removeFromParent'
				or $name eq 'eraseFromParent'
				or $name eq 'copyAttributesFrom'))
		or ($class ne 'Pass'
			and ($name eq 'assignPassManager'
				or $name eq 'getPotentialPassManagerType'
				or $name eq 'getAsImmutablePass'
				or $name eq 'runOnModule'))
		or ($class ne 'PassManagerBase'
			and $name eq 'add')
		or ($class ne 'Constant'
			and ($name eq 'destroyConstant'
				or $name eq 'replaceUsesOfWithOnConstant')))
		{
			$mod = 'virtual ' . $mod if ($mod !~ /virtual/);
			$decl_suffix .= ' override';
		}

		push @header, "\t$static$mod$name$suffix($arg_str)$decl_suffix;\n";
		push @code, "$mod_c${class}::$name$suffix($arg_str)\n"
				. ($constructor
					? "\t: ${constr}base($call)\n"
						. &reduce_indent($constr_inhr)
						. "\t, constructed(true)\n"
					: '')
				. "{\n"
				. $pre
				. ($constructor ? ''
					: "\t"
					. (($no_ret or $return_by_ptr)
						? ''
						: ($store ? 'auto r = ' : 'return '))
					. $call . ";\n")
				. $post
				. ($array
					? "\treturn s;\n"
					: (($store and not $constructor and not ($no_ret or $return_by_ptr))
						? "\treturn r;\n"
						: '')
					)
				. "}\n";
	}

	return (\@header, \@code);
}

sub manage_arg
{
	my ($arg, $constr, $pre, $post, $store, $use_ctx, $constructor) = @_;
	my ($r, $call);

	$arg =~ s/^enum //;

	if ($arg =~ /(?<c>ArrayRef)<(?<ns>\w+::)?(?<t>\w+)\s*(?<ptr>\^)?> &?(?<n>\w+)/)
	{
		&add_lib($+{c});
		&add_type($+{t});

		$store++;
		if ((not $+{ns}) and &is_prim_type($+{t}))
		{
			$use_utils = 1;
			$r = "array<$+{t}> ^$+{n}";
			$call = "utils::unmanage_array($+{n})";
		}
		else
		{
			my $is_enum = &is_enum($+{t});
			$r = "array<$+{ns}$+{t}" . ($is_enum ? '' : ' ^') . "> ^$+{n}";
			my $n = chr(97 + $store);
			my $m = $n . 'rr';
			my $p = ($+{ptr} ? '*' : '');
			my $h = ($is_enum ? '' : '^');
			$pre .=
				"\tllvm::$+{ns}$+{t} *$p$n = new llvm::$+{ns}$+{t}${p}[$+{n}->Length];\n"
				. "\tfor (int i = 0; i < $+{n}->Length; i++)\n"
				. "\t\t${n}[i] = " . (($+{ptr} or $is_enum) ? '' : '*') . &make_call("$+{ns}$+{t} $h$+{n}" . "[i]") . ";\n"
				. "\tllvm::ArrayRef<llvm::$+{ns}$+{t}$p> $m($n, $+{n}->Length);\n";
			$call = $m;
			$post = "\tdelete $n;\n" . $post;
		}
	}
	elsif ($arg =~ /((?<=const )(?:Twine|char)|StringRef|std::string)\s*[\^&]?\s*(\w+)?/)
	{
		$use_netlib = 1;
		&add_lib($1) if ($1 ne 'char');

		my $cpp = ($1 eq 'std::string');
		my $n = ($2 or 'Name');
		$r = "System::String ^$n";
		if ($cpp) {
			$use_marshal_cpp = 1;
			$call = "msclr::interop::marshal_as<std::string>($n)";
		} else {
			$use_marshal = 1;
			$call = "ctx.marshal_as<const char *>($n)";
		}

		if (not $use_ctx and not $cpp)
		{
			$use_ctx = 1;
			$pre = "\tmsclr::interop::marshal_context ctx;\n" . $pre;
		}
	}
	elsif ($arg =~ /^(?:const )?((?:\w+::)*\w+)(?: &?(\^?)(\w*))?$/ and not &is_prim_type($1))
	{
		my $n = $3;
		unless ($n) {
			$n = $1;
			$n =~ s/^\w+:://;
			$n =~ s/^.*([A-Z][a-z]*)$/ lc($1) /e;
		}
		&add_type($1);
		if ($1 eq 'void') {
			$r = "void *$n";
			$call = $n;
		} else {
			my $ptr = '';
			if ($2 or ($1 eq 'AnalysisID')) {
				$ptr = '^';
			} elsif (&is_ref_class($1)) {
				$ptr = '&';
			}
			$r = "$1 " . ($ptr ? '^' : '') . $n;
			$call = &make_call("$1 $ptr$n");
		}
	}
	elsif ($arg =~ /^(\w+) &(\w+)$/ and &is_prim_type($1))
	{
		$r = $arg;
		$call = $2;
	}
	else
	{
		$r = $arg;
		$call = &make_call($arg);
	}

	return ($r, $call, $constr, $pre, $post, $store, $use_ctx);
}

sub make_call
{
	$_ = $_[0];
	if (/^((?:(\w+)::)?([\w ]+)) (\w+(?:\[\w+\])?)$/)
	{
		if (&is_enum($1)) {
			my $ns = $2;
			$ns = $class if ((not $ns) and (defined $defined_in_class{$3}));
			return "safe_cast<llvm::" . ($ns ? $ns . '::' : '') . "$3>($4)";
		} else {
			return $4;
		}
	}
	elsif (/^([\w ]+) ([\^&])(\w+(?:\[\w+\])?)$/)
	{
		return ($2 eq '&' ? '*' : '') . "$3->base";
	}
	elsif (/(^[\w ]+) \^(\w+(?:\[\w+\])?)$/)
	{
		return "$2->base";
	}
	return '?';
}

sub add_lib
{
	my $lib = &defined_in($_[0]);
	my $in_header = $_[1];
	$lib =~ s/^llvm\/(?:IR|Support|Assembly)\/|^llvm\/(?=[^\/]+$)//;
	
	if ($lib and $lib ne "$file_name.h")
	{
		if ($in_header and not (grep { $_ eq $lib } @refs_incl_h)) {
			push @refs_incl_h, $lib;
		} elsif (not (grep { $_ eq $lib } @libs)) {
			push @libs, $lib;
		}
	}
}
sub add_type
{
	my $n = $_[0];
	$n =~ s/^const //;
	
	if ($n =~ /^(\w+)::(.+)$/)
	{
		&add_lib($1, 1);
		$n = $2;
	}
		
	if ($n eq $class
		or (grep { $_ =~ /enum class $n(?!\w)/ } @decl))
	{
		return;
	}

	if (&is_global_enum($n))
	{
		&add_lib($n, 1);
		return;
	}

	my $fn = &defined_in($n);
	$fn =~ s/^llvm\/(?:IR|Support|Assembly)\/|^llvm\/(?=[^\/]+$)//;

	if ($fn)
	{
		push @refs_decl, $n unless (grep { $_ eq $n } @refs_decl);
		push @refs_incl, $fn unless (grep { $_ eq $fn } @refs_incl);
		return;
	}
}
sub defined_in
{
	my $type = $_[0];

	return 'utils.h' if ($type eq 'utils');

	$type =~ s/^const //;
	$type =~ s/^\w+:://g;
	$type =~ s/<[^<>]*((?R)[^<>]*)*>//;
	if ($type ne 'void'
		and not &is_prim_type($type)
		and not (grep { $_ =~ /^enum class $type/ } @decl))
	{
		return $defined_in{$type};
	}
	return '';
}
sub is_prim_type
{
	return grep { $_ eq $_[0] } @prim_types;
}
sub is_ref_class
{
	my $type = $_[0];
	return ((defined $defined_in{$type}) and not &is_enum($type));
}
sub is_enum
{
	my $type = $_[0];
	my ($ns, $n) = ($type =~ /^(\w+)::(\w+)$/);
	$n = $type unless ($n);
	return (
		&is_global_enum($type)
		or (($ns or not (defined $defined_in{$type}))
			and (defined $defined_in_class{$n})));
}
sub is_global_enum
{
	my $type = $_[0];
	return (($type eq 'AtomicOrdering')
		or ($type eq 'SynchronizationScope')
		or ($type eq 'PassManagerType')
		or ($type eq 'PassKind')
		or ($type eq 'PassDebuggingString'));
}
sub reduce_indent
{
	my $s = $_[0];
	$s =~ s/\t\t/\t/g;
	return $s;
}
