#pragma once
#using <mscorlib.dll>
#include "llvm/IR/IRBuilder.h"
#include "Instruction.h"
#include "Instructions.h"
#include "InstrTypes.h"

namespace LLVM
{

ref class LLVMContext;
ref class BasicBlock;
ref class Instruction;
ref class Use;
ref class DebugLoc;
ref class Type;
ref class Value;
ref class ConstantInt;
ref class IntegerType;
ref class PointerType;
ref class CallInst;
ref class MDNode;
ref class FastMathFlags;
ref class Constant;
ref class ReturnInst;
ref class BranchInst;
ref class SwitchInst;
ref class IndirectBrInst;
ref class InvokeInst;
ref class ResumeInst;
ref class UnreachableInst;
ref class AllocaInst;
ref class LoadInst;
ref class StoreInst;
ref class FenceInst;
ref class AtomicCmpXchgInst;
ref class AtomicRMWInst;
ref class PHINode;
ref class VAArgInst;
ref class LandingPadInst;

public ref class IRBuilderBase
{
private:
	bool constructed;

internal:
	llvm::IRBuilderBase *base;

protected:
	IRBuilderBase(llvm::IRBuilderBase *base);

internal:
	static inline IRBuilderBase ^_wrap(llvm::IRBuilderBase *base);

public:
	!IRBuilderBase();
	virtual ~IRBuilderBase();
	IRBuilderBase(LLVMContext ^context);
	//   : Context(context);
	void ClearInsertionPoint();
	BasicBlock ^GetInsertBlock();
	// BasicBlock::iterator GetInsertPoint();
	LLVMContext ^getContext();
	void SetInsertPoint(BasicBlock ^TheBB);
	void SetInsertPoint(Instruction ^I);
	// void SetInsertPoint(BasicBlock *TheBB, BasicBlock::iterator IP);
	void SetInsertPoint(Use ^U);
	void SetCurrentDebugLocation(DebugLoc ^L);
	void DisableDebugLocations();
	void EnableDebugLocations();
	DebugLoc ^getCurrentDebugLocation();
	void SetInstDebugLocation(Instruction ^I);
	Type ^getCurrentFunctionReturnType();
	// InsertPoint saveIP();
	// InsertPoint saveAndClearIP();
	// void restoreIP(InsertPoint IP);
	Value ^CreateGlobalString(System::String ^Str);
	Value ^CreateGlobalString(System::String ^Str, System::String ^Name);
	ConstantInt ^getInt1(bool V);
	ConstantInt ^getTrue();
	ConstantInt ^getFalse();
	ConstantInt ^getInt8(uint8_t C);
	ConstantInt ^getInt16(uint16_t C);
	ConstantInt ^getInt32(uint32_t C);
	ConstantInt ^getInt64(uint64_t C);
	// ConstantInt *getInt(const APInt &AI);
	IntegerType ^getInt1Ty();
	IntegerType ^getInt8Ty();
	IntegerType ^getInt16Ty();
	IntegerType ^getInt32Ty();
	IntegerType ^getInt64Ty();
	Type ^getFloatTy();
	Type ^getDoubleTy();
	Type ^getVoidTy();
	PointerType ^getInt8PtrTy();
	PointerType ^getInt8PtrTy(unsigned AddrSpace);
	// IntegerType *getIntPtrTy(DataLayout *DL, unsigned AddrSpace = 0);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, uint64_t Size, unsigned Align);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, uint64_t Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, uint64_t Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, Value ^Size, unsigned Align);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, Value ^Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemSet(Value ^Ptr, Value ^Val, Value ^Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align, bool isVolatile, MDNode ^TBAATag, MDNode ^TBAAStructTag);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, Value ^Size, unsigned Align);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, Value ^Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, Value ^Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateMemCpy(Value ^Dst, Value ^Src, Value ^Size, unsigned Align, bool isVolatile, MDNode ^TBAATag, MDNode ^TBAAStructTag);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, uint64_t Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, Value ^Size, unsigned Align);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, Value ^Size, unsigned Align, bool isVolatile);
	CallInst ^CreateMemMove(Value ^Dst, Value ^Src, Value ^Size, unsigned Align, bool isVolatile, MDNode ^TBAATag);
	CallInst ^CreateLifetimeStart(Value ^Ptr);
	CallInst ^CreateLifetimeStart(Value ^Ptr, ConstantInt ^Size);
	CallInst ^CreateLifetimeEnd(Value ^Ptr);
	CallInst ^CreateLifetimeEnd(Value ^Ptr, ConstantInt ^Size);
};


public ref class IRBuilder
	: public IRBuilderBase
{
private:
	bool constructed;

internal:
	llvm::IRBuilder<> *base;

protected:
	IRBuilder(llvm::IRBuilder<> *base);

internal:
	static inline IRBuilder ^_wrap(llvm::IRBuilder<> *base);

public:
	!IRBuilder();
	virtual ~IRBuilder();
	// IRBuilder(LLVMContext &C, const T &F, const Inserter &I = Inserter(), MDNode *FPMathTag = 0);
	//   : IRBuilderBase(C), Inserter(I), Folder(F), DefaultFPMathTag(FPMathTag), FMF();
	IRBuilder(LLVMContext ^C);
	IRBuilder(LLVMContext ^C, MDNode ^FPMathTag);
	//   : IRBuilderBase(C), Folder(), DefaultFPMathTag(FPMathTag), FMF();
	// explicit IRBuilder(BasicBlock *TheBB, const T &F, MDNode *FPMathTag = 0);
	//   : IRBuilderBase(TheBB->getContext()), Folder(F), DefaultFPMathTag(FPMathTag), FMF();
	IRBuilder(BasicBlock ^TheBB);
	IRBuilder(BasicBlock ^TheBB, MDNode ^FPMathTag);
	//   : IRBuilderBase(TheBB->getContext()), Folder(), DefaultFPMathTag(FPMathTag), FMF();
	IRBuilder(Instruction ^IP);
	IRBuilder(Instruction ^IP, MDNode ^FPMathTag);
	//   : IRBuilderBase(IP->getContext()), Folder(), DefaultFPMathTag(FPMathTag), FMF();
	IRBuilder(Use ^U);
	IRBuilder(Use ^U, MDNode ^FPMathTag);
	//   : IRBuilderBase(U->getContext()), Folder(), DefaultFPMathTag(FPMathTag), FMF();
	// IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, const T &F, MDNode *FPMathTag = 0);
	//   : IRBuilderBase(TheBB->getContext()), Folder(F), DefaultFPMathTag(FPMathTag), FMF();
	// IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, MDNode *FPMathTag = 0);
	//   : IRBuilderBase(TheBB->getContext()), Folder(), DefaultFPMathTag(FPMathTag), FMF();
	// const T &getFolder();
	MDNode ^getDefaultFPMathTag();
	FastMathFlags ^getFastMathFlags();
	void clearFastMathFlags();
	void SetDefaultFPMathTag(MDNode ^FPMathTag);
	void SetFastMathFlags(FastMathFlags ^NewFMF);
	bool isNamePreserving();
	// template<typename InstTy>;
	// InstTy *Insert(InstTy *I, const Twine &Name = "");
	Constant ^Insert(Constant ^C);
	Constant ^Insert(Constant ^C, System::String ^Name);
	ReturnInst ^CreateRetVoid();
	ReturnInst ^CreateRet(Value ^V);
	// ReturnInst *CreateAggregateRet(Value *const *retVals, unsigned N);
	BranchInst ^CreateBr(BasicBlock ^Dest);
	BranchInst ^CreateCondBr(Value ^Cond, BasicBlock ^True, BasicBlock ^False);
	BranchInst ^CreateCondBr(Value ^Cond, BasicBlock ^True, BasicBlock ^False, MDNode ^BranchWeights);
	SwitchInst ^CreateSwitch(Value ^V, BasicBlock ^Dest);
	SwitchInst ^CreateSwitch(Value ^V, BasicBlock ^Dest, unsigned NumCases);
	SwitchInst ^CreateSwitch(Value ^V, BasicBlock ^Dest, unsigned NumCases, MDNode ^BranchWeights);
	IndirectBrInst ^CreateIndirectBr(Value ^Addr);
	IndirectBrInst ^CreateIndirectBr(Value ^Addr, unsigned NumDests);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, System::String ^Name);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, Value ^Arg1);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, Value ^Arg1, System::String ^Name);
	InvokeInst ^CreateInvoke3(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, Value ^Arg1, Value ^Arg2, Value ^Arg3);
	InvokeInst ^CreateInvoke3(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, Value ^Arg1, Value ^Arg2, Value ^Arg3, System::String ^Name);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, array<Value ^> ^Args);
	InvokeInst ^CreateInvoke(Value ^Callee, BasicBlock ^NormalDest, BasicBlock ^UnwindDest, array<Value ^> ^Args, System::String ^Name);
	ResumeInst ^CreateResume(Value ^Exn);
	UnreachableInst ^CreateUnreachable();
	Value ^CreateAdd(Value ^LHS, Value ^RHS);
	Value ^CreateAdd(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateAdd(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW);
	Value ^CreateAdd(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW, bool HasNSW);
	Value ^CreateNSWAdd(Value ^LHS, Value ^RHS);
	Value ^CreateNSWAdd(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateNUWAdd(Value ^LHS, Value ^RHS);
	Value ^CreateNUWAdd(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFAdd(Value ^LHS, Value ^RHS);
	Value ^CreateFAdd(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFAdd(Value ^LHS, Value ^RHS, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateSub(Value ^LHS, Value ^RHS);
	Value ^CreateSub(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateSub(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW);
	Value ^CreateSub(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW, bool HasNSW);
	Value ^CreateNSWSub(Value ^LHS, Value ^RHS);
	Value ^CreateNSWSub(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateNUWSub(Value ^LHS, Value ^RHS);
	Value ^CreateNUWSub(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFSub(Value ^LHS, Value ^RHS);
	Value ^CreateFSub(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFSub(Value ^LHS, Value ^RHS, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateMul(Value ^LHS, Value ^RHS);
	Value ^CreateMul(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateMul(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW);
	Value ^CreateMul(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW, bool HasNSW);
	Value ^CreateNSWMul(Value ^LHS, Value ^RHS);
	Value ^CreateNSWMul(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateNUWMul(Value ^LHS, Value ^RHS);
	Value ^CreateNUWMul(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFMul(Value ^LHS, Value ^RHS);
	Value ^CreateFMul(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFMul(Value ^LHS, Value ^RHS, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateUDiv(Value ^LHS, Value ^RHS);
	Value ^CreateUDiv(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateUDiv(Value ^LHS, Value ^RHS, System::String ^Name, bool isExact);
	Value ^CreateExactUDiv(Value ^LHS, Value ^RHS);
	Value ^CreateExactUDiv(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateSDiv(Value ^LHS, Value ^RHS);
	Value ^CreateSDiv(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateSDiv(Value ^LHS, Value ^RHS, System::String ^Name, bool isExact);
	Value ^CreateExactSDiv(Value ^LHS, Value ^RHS);
	Value ^CreateExactSDiv(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFDiv(Value ^LHS, Value ^RHS);
	Value ^CreateFDiv(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFDiv(Value ^LHS, Value ^RHS, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateURem(Value ^LHS, Value ^RHS);
	Value ^CreateURem(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateSRem(Value ^LHS, Value ^RHS);
	Value ^CreateSRem(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFRem(Value ^LHS, Value ^RHS);
	Value ^CreateFRem(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFRem(Value ^LHS, Value ^RHS, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateShl(Value ^LHS, Value ^RHS);
	Value ^CreateShl(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateShl(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW);
	Value ^CreateShl(Value ^LHS, Value ^RHS, System::String ^Name, bool HasNUW, bool HasNSW);
	// Value *CreateShl(Value *LHS, const APInt &RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false);
	Value ^CreateShl(Value ^LHS, uint64_t RHS);
	Value ^CreateShl(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateShl(Value ^LHS, uint64_t RHS, System::String ^Name, bool HasNUW);
	Value ^CreateShl(Value ^LHS, uint64_t RHS, System::String ^Name, bool HasNUW, bool HasNSW);
	Value ^CreateLShr(Value ^LHS, Value ^RHS);
	Value ^CreateLShr(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateLShr(Value ^LHS, Value ^RHS, System::String ^Name, bool isExact);
	// Value *CreateLShr(Value *LHS, const APInt &RHS, const Twine &Name = "", bool isExact = false);
	Value ^CreateLShr(Value ^LHS, uint64_t RHS);
	Value ^CreateLShr(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateLShr(Value ^LHS, uint64_t RHS, System::String ^Name, bool isExact);
	Value ^CreateAShr(Value ^LHS, Value ^RHS);
	Value ^CreateAShr(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateAShr(Value ^LHS, Value ^RHS, System::String ^Name, bool isExact);
	// Value *CreateAShr(Value *LHS, const APInt &RHS, const Twine &Name = "", bool isExact = false);
	Value ^CreateAShr(Value ^LHS, uint64_t RHS);
	Value ^CreateAShr(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateAShr(Value ^LHS, uint64_t RHS, System::String ^Name, bool isExact);
	Value ^CreateAnd(Value ^LHS, Value ^RHS);
	Value ^CreateAnd(Value ^LHS, Value ^RHS, System::String ^Name);
	// Value *CreateAnd(Value *LHS, const APInt &RHS, const Twine &Name = "");
	Value ^CreateAnd(Value ^LHS, uint64_t RHS);
	Value ^CreateAnd(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateOr(Value ^LHS, Value ^RHS);
	Value ^CreateOr(Value ^LHS, Value ^RHS, System::String ^Name);
	// Value *CreateOr(Value *LHS, const APInt &RHS, const Twine &Name = "");
	Value ^CreateOr(Value ^LHS, uint64_t RHS);
	Value ^CreateOr(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateXor(Value ^LHS, Value ^RHS);
	Value ^CreateXor(Value ^LHS, Value ^RHS, System::String ^Name);
	// Value *CreateXor(Value *LHS, const APInt &RHS, const Twine &Name = "");
	Value ^CreateXor(Value ^LHS, uint64_t RHS);
	Value ^CreateXor(Value ^LHS, uint64_t RHS, System::String ^Name);
	Value ^CreateBinOp(Instruction::BinaryOps Opc, Value ^LHS, Value ^RHS);
	Value ^CreateBinOp(Instruction::BinaryOps Opc, Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateNeg(Value ^V);
	Value ^CreateNeg(Value ^V, System::String ^Name);
	Value ^CreateNeg(Value ^V, System::String ^Name, bool HasNUW);
	Value ^CreateNeg(Value ^V, System::String ^Name, bool HasNUW, bool HasNSW);
	Value ^CreateNSWNeg(Value ^V);
	Value ^CreateNSWNeg(Value ^V, System::String ^Name);
	Value ^CreateNUWNeg(Value ^V);
	Value ^CreateNUWNeg(Value ^V, System::String ^Name);
	Value ^CreateFNeg(Value ^V);
	Value ^CreateFNeg(Value ^V, System::String ^Name);
	Value ^CreateFNeg(Value ^V, System::String ^Name, MDNode ^FPMathTag);
	Value ^CreateNot(Value ^V);
	Value ^CreateNot(Value ^V, System::String ^Name);
	AllocaInst ^CreateAlloca(Type ^Ty);
	AllocaInst ^CreateAlloca(Type ^Ty, Value ^ArraySize);
	AllocaInst ^CreateAlloca(Type ^Ty, Value ^ArraySize, System::String ^Name);
	LoadInst ^CreateLoad(Value ^Ptr, System::String ^Name);
	LoadInst ^CreateLoad(Value ^Ptr);
	LoadInst ^CreateLoad(Value ^Ptr, bool isVolatile);
	LoadInst ^CreateLoad(Value ^Ptr, bool isVolatile, System::String ^Name);
	StoreInst ^CreateStore(Value ^Val, Value ^Ptr);
	StoreInst ^CreateStore(Value ^Val, Value ^Ptr, bool isVolatile);
	LoadInst ^CreateAlignedLoad(Value ^Ptr, unsigned Align, System::String ^Name);
	LoadInst ^CreateAlignedLoad(Value ^Ptr, unsigned Align);
	LoadInst ^CreateAlignedLoad(Value ^Ptr, unsigned Align, bool isVolatile);
	LoadInst ^CreateAlignedLoad(Value ^Ptr, unsigned Align, bool isVolatile, System::String ^Name);
	StoreInst ^CreateAlignedStore(Value ^Val, Value ^Ptr, unsigned Align);
	StoreInst ^CreateAlignedStore(Value ^Val, Value ^Ptr, unsigned Align, bool isVolatile);
	FenceInst ^CreateFence(AtomicOrdering Ordering);
	FenceInst ^CreateFence(AtomicOrdering Ordering, SynchronizationScope SynchScope);
	AtomicCmpXchgInst ^CreateAtomicCmpXchg(Value ^Ptr, Value ^Cmp, Value ^New, AtomicOrdering Ordering);
	AtomicCmpXchgInst ^CreateAtomicCmpXchg(Value ^Ptr, Value ^Cmp, Value ^New, AtomicOrdering Ordering, SynchronizationScope SynchScope);
	AtomicRMWInst ^CreateAtomicRMW(AtomicRMWInst::BinOp Op, Value ^Ptr, Value ^Val, AtomicOrdering Ordering);
	AtomicRMWInst ^CreateAtomicRMW(AtomicRMWInst::BinOp Op, Value ^Ptr, Value ^Val, AtomicOrdering Ordering, SynchronizationScope SynchScope);
	Value ^CreateGEP(Value ^Ptr, array<Value ^> ^IdxList);
	Value ^CreateGEP(Value ^Ptr, array<Value ^> ^IdxList, System::String ^Name);
	Value ^CreateInBoundsGEP(Value ^Ptr, array<Value ^> ^IdxList);
	Value ^CreateInBoundsGEP(Value ^Ptr, array<Value ^> ^IdxList, System::String ^Name);
	Value ^CreateGEP(Value ^Ptr, Value ^Idx);
	Value ^CreateGEP(Value ^Ptr, Value ^Idx, System::String ^Name);
	Value ^CreateInBoundsGEP(Value ^Ptr, Value ^Idx);
	Value ^CreateInBoundsGEP(Value ^Ptr, Value ^Idx, System::String ^Name);
	Value ^CreateConstGEP1_32(Value ^Ptr, unsigned Idx0);
	Value ^CreateConstGEP1_32(Value ^Ptr, unsigned Idx0, System::String ^Name);
	Value ^CreateConstInBoundsGEP1_32(Value ^Ptr, unsigned Idx0);
	Value ^CreateConstInBoundsGEP1_32(Value ^Ptr, unsigned Idx0, System::String ^Name);
	Value ^CreateConstGEP2_32(Value ^Ptr, unsigned Idx0, unsigned Idx1);
	Value ^CreateConstGEP2_32(Value ^Ptr, unsigned Idx0, unsigned Idx1, System::String ^Name);
	Value ^CreateConstInBoundsGEP2_32(Value ^Ptr, unsigned Idx0, unsigned Idx1);
	Value ^CreateConstInBoundsGEP2_32(Value ^Ptr, unsigned Idx0, unsigned Idx1, System::String ^Name);
	Value ^CreateConstGEP1_64(Value ^Ptr, uint64_t Idx0);
	Value ^CreateConstGEP1_64(Value ^Ptr, uint64_t Idx0, System::String ^Name);
	Value ^CreateConstInBoundsGEP1_64(Value ^Ptr, uint64_t Idx0);
	Value ^CreateConstInBoundsGEP1_64(Value ^Ptr, uint64_t Idx0, System::String ^Name);
	Value ^CreateConstGEP2_64(Value ^Ptr, uint64_t Idx0, uint64_t Idx1);
	Value ^CreateConstGEP2_64(Value ^Ptr, uint64_t Idx0, uint64_t Idx1, System::String ^Name);
	Value ^CreateConstInBoundsGEP2_64(Value ^Ptr, uint64_t Idx0, uint64_t Idx1);
	Value ^CreateConstInBoundsGEP2_64(Value ^Ptr, uint64_t Idx0, uint64_t Idx1, System::String ^Name);
	Value ^CreateStructGEP(Value ^Ptr, unsigned Idx);
	Value ^CreateStructGEP(Value ^Ptr, unsigned Idx, System::String ^Name);
	Value ^CreateGlobalStringPtr(System::String ^Str);
	Value ^CreateGlobalStringPtr(System::String ^Str, System::String ^Name);
	Value ^CreateTrunc(Value ^V, Type ^DestTy);
	Value ^CreateTrunc(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateZExt(Value ^V, Type ^DestTy);
	Value ^CreateZExt(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateSExt(Value ^V, Type ^DestTy);
	Value ^CreateSExt(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateZExtOrTrunc(Value ^V, Type ^DestTy);
	Value ^CreateZExtOrTrunc(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateSExtOrTrunc(Value ^V, Type ^DestTy);
	Value ^CreateSExtOrTrunc(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateFPToUI(Value ^V, Type ^DestTy);
	Value ^CreateFPToUI(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateFPToSI(Value ^V, Type ^DestTy);
	Value ^CreateFPToSI(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateUIToFP(Value ^V, Type ^DestTy);
	Value ^CreateUIToFP(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateSIToFP(Value ^V, Type ^DestTy);
	Value ^CreateSIToFP(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateFPTrunc(Value ^V, Type ^DestTy);
	Value ^CreateFPTrunc(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateFPExt(Value ^V, Type ^DestTy);
	Value ^CreateFPExt(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreatePtrToInt(Value ^V, Type ^DestTy);
	Value ^CreatePtrToInt(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateIntToPtr(Value ^V, Type ^DestTy);
	Value ^CreateIntToPtr(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateBitCast(Value ^V, Type ^DestTy);
	Value ^CreateBitCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateZExtOrBitCast(Value ^V, Type ^DestTy);
	Value ^CreateZExtOrBitCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateSExtOrBitCast(Value ^V, Type ^DestTy);
	Value ^CreateSExtOrBitCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateTruncOrBitCast(Value ^V, Type ^DestTy);
	Value ^CreateTruncOrBitCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateCast(Instruction::CastOps Op, Value ^V, Type ^DestTy);
	Value ^CreateCast(Instruction::CastOps Op, Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreatePointerCast(Value ^V, Type ^DestTy);
	Value ^CreatePointerCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateIntCast(Value ^V, Type ^DestTy, bool isSigned);
	Value ^CreateIntCast(Value ^V, Type ^DestTy, bool isSigned, System::String ^Name);
	Value ^CreateFPCast(Value ^V, Type ^DestTy);
	Value ^CreateFPCast(Value ^V, Type ^DestTy, System::String ^Name);
	Value ^CreateICmpEQ(Value ^LHS, Value ^RHS);
	Value ^CreateICmpEQ(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpNE(Value ^LHS, Value ^RHS);
	Value ^CreateICmpNE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpUGT(Value ^LHS, Value ^RHS);
	Value ^CreateICmpUGT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpUGE(Value ^LHS, Value ^RHS);
	Value ^CreateICmpUGE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpULT(Value ^LHS, Value ^RHS);
	Value ^CreateICmpULT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpULE(Value ^LHS, Value ^RHS);
	Value ^CreateICmpULE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpSGT(Value ^LHS, Value ^RHS);
	Value ^CreateICmpSGT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpSGE(Value ^LHS, Value ^RHS);
	Value ^CreateICmpSGE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpSLT(Value ^LHS, Value ^RHS);
	Value ^CreateICmpSLT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmpSLE(Value ^LHS, Value ^RHS);
	Value ^CreateICmpSLE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpOEQ(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpOEQ(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpOGT(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpOGT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpOGE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpOGE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpOLT(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpOLT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpOLE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpOLE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpONE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpONE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpORD(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpORD(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpUNO(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpUNO(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpUEQ(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpUEQ(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpUGT(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpUGT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpUGE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpUGE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpULT(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpULT(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpULE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpULE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmpUNE(Value ^LHS, Value ^RHS);
	Value ^CreateFCmpUNE(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateICmp(CmpInst::Predicate P, Value ^LHS, Value ^RHS);
	Value ^CreateICmp(CmpInst::Predicate P, Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateFCmp(CmpInst::Predicate P, Value ^LHS, Value ^RHS);
	Value ^CreateFCmp(CmpInst::Predicate P, Value ^LHS, Value ^RHS, System::String ^Name);
	PHINode ^CreatePHI(Type ^Ty, unsigned NumReservedValues);
	PHINode ^CreatePHI(Type ^Ty, unsigned NumReservedValues, System::String ^Name);
	CallInst ^CreateCall(Value ^Callee);
	CallInst ^CreateCall(Value ^Callee, System::String ^Name);
	CallInst ^CreateCall(Value ^Callee, Value ^Arg);
	CallInst ^CreateCall(Value ^Callee, Value ^Arg, System::String ^Name);
	CallInst ^CreateCall2(Value ^Callee, Value ^Arg1, Value ^Arg2);
	CallInst ^CreateCall2(Value ^Callee, Value ^Arg1, Value ^Arg2, System::String ^Name);
	CallInst ^CreateCall3(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3);
	CallInst ^CreateCall3(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3, System::String ^Name);
	CallInst ^CreateCall4(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3, Value ^Arg4);
	CallInst ^CreateCall4(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3, Value ^Arg4, System::String ^Name);
	CallInst ^CreateCall5(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3, Value ^Arg4, Value ^Arg5);
	CallInst ^CreateCall5(Value ^Callee, Value ^Arg1, Value ^Arg2, Value ^Arg3, Value ^Arg4, Value ^Arg5, System::String ^Name);
	CallInst ^CreateCall(Value ^Callee, array<Value ^> ^Args);
	CallInst ^CreateCall(Value ^Callee, array<Value ^> ^Args, System::String ^Name);
	Value ^CreateSelect(Value ^C, Value ^True, Value ^False);
	Value ^CreateSelect(Value ^C, Value ^True, Value ^False, System::String ^Name);
	VAArgInst ^CreateVAArg(Value ^List, Type ^Ty);
	VAArgInst ^CreateVAArg(Value ^List, Type ^Ty, System::String ^Name);
	Value ^CreateExtractElement(Value ^Vec, Value ^Idx);
	Value ^CreateExtractElement(Value ^Vec, Value ^Idx, System::String ^Name);
	Value ^CreateInsertElement(Value ^Vec, Value ^NewElt, Value ^Idx);
	Value ^CreateInsertElement(Value ^Vec, Value ^NewElt, Value ^Idx, System::String ^Name);
	Value ^CreateShuffleVector(Value ^V1, Value ^V2, Value ^Mask);
	Value ^CreateShuffleVector(Value ^V1, Value ^V2, Value ^Mask, System::String ^Name);
	Value ^CreateExtractValue(Value ^Agg, array<unsigned> ^Idxs);
	Value ^CreateExtractValue(Value ^Agg, array<unsigned> ^Idxs, System::String ^Name);
	Value ^CreateInsertValue(Value ^Agg, Value ^Val, array<unsigned> ^Idxs);
	Value ^CreateInsertValue(Value ^Agg, Value ^Val, array<unsigned> ^Idxs, System::String ^Name);
	LandingPadInst ^CreateLandingPad(Type ^Ty, Value ^PersFn, unsigned NumClauses);
	LandingPadInst ^CreateLandingPad(Type ^Ty, Value ^PersFn, unsigned NumClauses, System::String ^Name);
	Value ^CreateIsNull(Value ^Arg);
	Value ^CreateIsNull(Value ^Arg, System::String ^Name);
	Value ^CreateIsNotNull(Value ^Arg);
	Value ^CreateIsNotNull(Value ^Arg, System::String ^Name);
	Value ^CreatePtrDiff(Value ^LHS, Value ^RHS);
	Value ^CreatePtrDiff(Value ^LHS, Value ^RHS, System::String ^Name);
	Value ^CreateVectorSplat(unsigned NumElts, Value ^V);
	Value ^CreateVectorSplat(unsigned NumElts, Value ^V, System::String ^Name);
};

}
